{"ast":null,"code":"var _jsxFileName = \"/Users/michaeltharratt/repos/toy-robot-challenge/src/components/Board.jsx\";\nimport Cell from \"./Cell\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(_ref) {\n  let {\n    grid,\n    robot\n  } = _ref;\n  const checkForRobot = (row, col) => {\n    if (!robot) {\n      return false;\n    } else if (row === robot.row && col === robot.col) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        robot: checkForRobot(rowIndex, colIndex),\n        direction: robot.facing\n      }, `${rowIndex}, ${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 15\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Cell","jsxDEV","_jsxDEV","Board","_ref","grid","robot","checkForRobot","row","col","className","children","map","rowIndex","cell","colIndex","direction","facing","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/michaeltharratt/repos/toy-robot-challenge/src/components/Board.jsx"],"sourcesContent":["import Cell from \"./Cell\"\n\nexport default function Board({ grid, robot }) {\n  const checkForRobot = (row, col) => {\n    if (!robot) {\n      return false\n    } else if (row === robot.row && col === robot.col) {\n      return true\n    } else {\n       return false\n    }\n  }\n  \n  return (\n    <div className=\"Board\">\n       { grid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n              {row.map((cell, colIndex) => (\n              <Cell \n                key={`${rowIndex}, ${colIndex}`} \n                robot={checkForRobot(rowIndex, colIndex)}\n                direction={robot.facing}\n              /> \n              ))}\n          </div> \n        ))}\n    </div>\n  )\n}\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,eAAe,SAASC,KAAKA,CAAAC,IAAA,EAAkB;EAAA,IAAjB;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAC3C,MAAMG,aAAa,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAClC,IAAI,CAACH,KAAK,EAAE;MACV,OAAO,KAAK;IACd,CAAC,MAAM,IAAIE,GAAG,KAAKF,KAAK,CAACE,GAAG,IAAIC,GAAG,KAAKH,KAAK,CAACG,GAAG,EAAE;MACjD,OAAO,IAAI;IACb,CAAC,MAAM;MACJ,OAAO,KAAK;IACf;EACF,CAAC;EAED,oBACEP,OAAA;IAAKQ,SAAS,EAAC,OAAO;IAAAC,QAAA,EACjBN,IAAI,CAACO,GAAG,CAAC,CAACJ,GAAG,EAAEK,QAAQ,kBACtBX,OAAA;MAAKQ,SAAS,EAAC,KAAK;MAAAC,QAAA,EACfH,GAAG,CAACI,GAAG,CAAC,CAACE,IAAI,EAAEC,QAAQ,kBACxBb,OAAA,CAACF,IAAI;QAEHM,KAAK,EAAEC,aAAa,CAACM,QAAQ,EAAEE,QAAQ,CAAE;QACzCC,SAAS,EAAEV,KAAK,CAACW;MAAO,GAFlB,GAAEJ,QAAS,KAAIE,QAAS,EAAC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGhC,CACA;IAAC,GAPoBR,QAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQ7B,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAACC,EAAA,GA1BuBnB,KAAK;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}