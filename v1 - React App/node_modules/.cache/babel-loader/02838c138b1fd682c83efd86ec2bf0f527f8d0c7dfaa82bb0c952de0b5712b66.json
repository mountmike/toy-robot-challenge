{"ast":null,"code":"var _jsxFileName = \"/Users/michaeltharratt/repos/toy-robot-challenge/src/components/Controls.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Controls(_ref) {\n  _s();\n  let {\n    init,\n    grid,\n    robot,\n    setRobot\n  } = _ref;\n  const [report, setReport] = useState(null);\n  const move = () => {\n    if (!robot) {\n      setReport(\"Please place robot on grid to move!\");\n      return;\n    }\n    if (robot.facing == \"North\") {\n      setRobot({\n        ...robot,\n        row: robot.row + 1\n      });\n    } else if (robot.facing == \"East\") {\n      setRobot({\n        ...robot,\n        row: robot.col + 1\n      });\n    } else if (robot.facing == \"South\") {\n      setRobot({\n        ...robot,\n        row: robot.row - 1\n      });\n    } else if (robot.facing == \"West\") {\n      setRobot({\n        ...robot,\n        row: robot.col - 1\n      });\n    }\n  };\n\n  // const handleRotate = (direction) => {\n  //   if (!robot) {\n  //     setReport(\"Please place robot on grid before rotating!\")\n  //     return\n  //   }\n\n  //   const compass = [\"North\", \"East\", \"South\", \"West\"]\n  //   let currentIndex = compass.indexOf(robot.facing)\n\n  //   if (direction === \"antiClockwise\") {\n  //     console.log(compass[currentIndex + 1]);\n  //   }\n  // }\n\n  const getReport = () => {\n    if (!robot) {\n      setReport(\"Please place robot on grid to see report!\");\n      return;\n    }\n    console.log(grid);\n    setReport(`The robot is at position ${robot.location} and is facing ${robot.facing}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: init,\n      children: \"Place robot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: move,\n      children: \"move\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRotate(\"antiClockwise\"),\n      children: \"rotate left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"rotate right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getReport,\n      children: \"report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"report-output\",\n      children: report\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Controls, \"9sXrEVMqNEWLjicNer4dTim2g1U=\");\n_c = Controls;\nvar _c;\n$RefreshReg$(_c, \"Controls\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Controls","_ref","_s","init","grid","robot","setRobot","report","setReport","move","facing","row","col","getReport","console","log","location","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","handleRotate","_c","$RefreshReg$"],"sources":["/Users/michaeltharratt/repos/toy-robot-challenge/src/components/Controls.jsx"],"sourcesContent":["import { useState } from \"react\"\n\nexport default function Controls({ init, grid, robot, setRobot }) {\n  const [report, setReport] = useState(null)\n\n  const move = () => {\n    if (!robot) {\n      setReport(\"Please place robot on grid to move!\")\n      return\n    }\n\n    if (robot.facing == \"North\") {\n      setRobot({ ...robot, row: robot.row + 1})\n    } else if (robot.facing == \"East\") {\n      setRobot({ ...robot, row: robot.col + 1})\n    } else if (robot.facing == \"South\") {\n      setRobot({ ...robot, row: robot.row - 1})\n    } else if (robot.facing == \"West\") {\n      setRobot({ ...robot, row: robot.col - 1})\n    }\n  }\n\n  // const handleRotate = (direction) => {\n  //   if (!robot) {\n  //     setReport(\"Please place robot on grid before rotating!\")\n  //     return\n  //   }\n    \n  //   const compass = [\"North\", \"East\", \"South\", \"West\"]\n  //   let currentIndex = compass.indexOf(robot.facing)\n\n  //   if (direction === \"antiClockwise\") {\n  //     console.log(compass[currentIndex + 1]);\n  //   }\n  // }\n\n  const getReport = () => {\n    if (!robot) {\n      setReport(\"Please place robot on grid to see report!\")\n      return\n    }\n    console.log(grid);\n    setReport(`The robot is at position ${robot.location} and is facing ${robot.facing}`)\n  }\n\n  return (\n    <div className=\"Controls\">\n      <button onClick={init}>Place robot</button>\n      <button onClick={move}>move</button>\n      <button onClick={handleRotate(\"antiClockwise\")}>rotate left</button>\n      <button>rotate right</button>\n      <button onClick={getReport}>report</button>\n\n      <p className=\"report-output\">\n        {report}\n      </p>\n\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}